buildscript {
    ext {
        springBootVersion = '2.1.9.RELEASE'
        gradle_node_version='2.2.4'
        querydslPluginVersion = '1.0.10'
    }

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE"
        classpath("com.github.node-gradle:gradle-node-plugin:${gradle_node_version}")
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}")
    }
}

allprojects {
    group = 'com.junyoung'
    version = '0.0.1-SNAPSHOT'
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.github.node-gradle.node'
    apply plugin: 'com.ewerk.gradle.plugins.querydsl'

    sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    task initSourceFolders {
        sourceSets*.java.srcDirs*.each {
            if( !it.exists() ) {
                it.mkdirs()
            }
        }

        sourceSets*.resources.srcDirs*.each {
            if( !it.exists() ) {
                it.mkdirs()
            }
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'com.querydsl:querydsl-jpa'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    def querydslDir = "$buildDir/generated/querydsl"

    querydsl {
        jpa = true
        querydslSourcesDir = querydslDir
    }

    sourceSets {
        main.java.srcDir querydslDir
    }

    configurations {
        querydsl.extendsFrom compileClasspath
    }

    compileQuerydsl {
        options.annotationProcessorPath = configurations.querydsl
    }

    test {
        useJUnitPlatform()
    }
}







